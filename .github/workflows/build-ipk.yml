name: Build xray IPK packages

on:
  workflow_dispatch:
    inputs:
      copy:
        description: 'Build all releases'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  prepare-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.set-versions.outputs.versions }}
    steps:
      - name: Determine versions
        id: set-versions
        run: |
          if [ "${{ github.event.inputs.copy }}" = "true" ]; then
            versions=$(curl -s https://api.github.com/repos/XTLS/Xray-core/releases \
              | jq -r '.[].tag_name' \
              | grep '^v[0-9]\+' \
              | sed 's/^v//' \
              | awk -F. '($1 > 25) || ($1 == 25 && $2 >= 4)' \
              | sort -V)

            # Преобразуем список в JSON-массив одной строкой
            versions_json=$(echo "$versions" | jq -R . | jq -s -c .)
          else
            latest=$(curl -s https://api.github.com/repos/XTLS/Xray-core/releases/latest | jq -r '.tag_name' | sed 's/^v//')
            versions_json=$(echo "[\"$latest\"]")
          fi

          echo "Building versions: $versions_json"
          echo "versions=$versions_json" >> $GITHUB_OUTPUT

  build-ipk:
    needs: prepare-versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [arm64-v8a, mips32le, mips32]
        version: ${{ fromJson(needs.prepare-versions.outputs.versions) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y tar gzip jq unzip fakeroot

    - name: Download Xray-core
      run: |
        wget https://github.com/XTLS/Xray-core/releases/download/v${{ matrix.version }}/Xray-linux-${{ matrix.arch }}.zip

    - name: Create IPK package structure
      run: |
        mkdir -p xray-${{ matrix.version }}-${{ matrix.arch }}/opt/sbin
        mkdir -p xray-${{ matrix.version }}-${{ matrix.arch }}/opt/etc/ndm/netfilter.d
        mkdir -p xray-${{ matrix.version }}-${{ matrix.arch }}/opt/etc/init.d
        mkdir -p xray-${{ matrix.version }}-${{ matrix.arch }}/opt/etc/xray/configs
        mkdir -p xray-${{ matrix.version }}-${{ matrix.arch }}/opt/etc/xray/dat
        mkdir -p xray-${{ matrix.version }}-${{ matrix.arch }}/opt/etc/xwave
        mkdir -p xray-${{ matrix.version }}-${{ matrix.arch }}/opt/var/log/xwave
        mkdir -p xray-${{ matrix.version }}-${{ matrix.arch }}/CONTROL
        
        unzip Xray-linux-${{ matrix.arch }}.zip xray -d xray-${{ matrix.version }}-${{ matrix.arch }}/opt/sbin

        cp ./etc/init.d/S98xray xray-${{ matrix.version }}-${{ matrix.arch }}/opt/etc/init.d/S98xray
        chmod +x xray-${{ matrix.version }}-${{ matrix.arch }}/opt/etc/init.d/S98xray
        
        # Маппинг arch → Architecture
        case "${{ matrix.arch }}" in
          arm64-v8a) arch_pkg="aarch64-3.10" ;;
          mips32le)  arch_pkg="mipsel-3.4" ;;
          mips32)    arch_pkg="mips-3.4" ;;
          *)         arch_pkg="${{ matrix.arch }}" ;; # fallback
        esac

        cat > xray-${{ matrix.version }}-${{ matrix.arch }}/CONTROL/control <<EOF
        Package: xray-tg-installer
        Depends: libc,libssp,librt,libpthread,libpthread,jq,iptables,cron,curl
        Version: ${{ matrix.version }}
        Architecture: $arch_pkg
        Section: net
        Description: A minimalistic tool to automate Xray setup on Keenetic router systems..
        License: GPL-3.0 license
        Maintainer: for6to9si <for6to9si@gmail.com>
        EOF

        cp ./etc/ndm/netfilter.d/000-xwave.sh xray-${{ matrix.version }}-${{ matrix.arch }}/opt/etc/ndm/netfilter.d/
        chmod +x xray-${{ matrix.version }}-${{ matrix.arch }}/opt/etc/ndm/netfilter.d/000-xwave.sh
        cp ./etc/xwave/settings.json xray-${{ matrix.version }}-${{ matrix.arch }}/opt/etc/xwave/example.json

    - name: Add postinst script, add policy Xwave
      run: |
        cat > xray-${{ matrix.version }}-${{ matrix.arch }}/CONTROL/postinst <<'EOF'
        #!/bin/sh
        case "$1" in
         configure)
             ndmc -c 'ip policy Xwave'
             ndmc -c 'ip policy Xwave description Xwave'
             ndmc -c 'ip policy Xwave permit global ISP'
             ndmc -c 'system configuration save'
         ;;
        esac
        exit 0
        EOF
        chmod 755 xray-${{ matrix.version }}-${{ matrix.arch }}/CONTROL/postinst

    - name: Add postrm script
      run: |
        cat > xray-${{ matrix.version }}-${{ matrix.arch }}/CONTROL/postrm <<'EOF'
        #!/bin/sh
        case "$1" in
         remove)
             ndmc -c 'ip no policy Xwave'
             ndmc -c 'system configuration save'
         ;;
        esac
        exit 0
        EOF
        chmod 755 xray-${{ matrix.version }}-${{ matrix.arch }}/CONTROL/postrm

    - name: Include xray license and copyright
      run: |
        unzip Xray-linux-${{ matrix.arch }}.zip LICENSE -d xray-${{ matrix.version }}-${{ matrix.arch }}/CONTROL
        unzip Xray-linux-${{ matrix.arch }}.zip LICENSE -d xray-${{ matrix.version }}-${{ matrix.arch }}/opt/etc/xray

    - name: Package IPK
      run: |
        cd xray-${{ matrix.version }}-${{ matrix.arch }}
        fakeroot tar -czf ../data.tar.gz ./opt/sbin ./opt/etc ./opt/var/log/xwave
        cd ./CONTROL
        fakeroot tar -czf ../../control.tar.gz *
        cd ..
        echo "2.0" > ../debian-binary
        cd ..
        fakeroot tar -czf xray_${{ matrix.version }}_${{ matrix.arch }}.ipk ./debian-binary ./control.tar.gz ./data.tar.gz

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: xray-${{ matrix.version }}-${{ matrix.arch }}
        path: ./*.ipk
        if-no-files-found: error

  deploy-repository:
    runs-on: ubuntu-latest
    needs: [build-ipk]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate changelog
        run: |
          # Найдём предыдущий тег по дате создания
          PREV_TAG=$(git tag --sort=-creatordate | tail -n 2 | head -n 1 || echo "")

          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found. Logging all history."
            git log --pretty=format:'- [%h](https://github.com/${{ github.repository }}/commit/%H): %s' > changelog.txt
          else
            echo "Generating changelog from $PREV_TAG to HEAD"
            git log "$PREV_TAG"..HEAD --pretty=format:'- [%h](https://github.com/${{ github.repository }}/commit/%H): %s' > changelog.txt
          fi

          echo "Changelog:"
          cat changelog.txt

      - name: Create releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Группируем артефакты по версии
          for ver in $(ls artifacts/*/xray_*.ipk | sed -E 's/.*xray_([0-9.]+)_.*/\1/' | sort -u); do
            tag="v$ver"
            files=$(ls artifacts/*/xray_${ver}_*.ipk)

            echo "Creating release $tag with files: $files"

            if [ "${{ github.event.inputs.copy }}" = "true" ]; then
              gh release create "$tag" $files \
                --repo "$GITHUB_REPOSITORY" \
                --title "Release $tag (copied)" \
                --notes-file changelog.txt || echo "Release $tag already exists"
            else
              gh release create "$tag" $files \
                --repo "$GITHUB_REPOSITORY" \
                --title "Release $tag" \
                --notes-file changelog.txt || echo "Release $tag already exists"
            fi
          done

